<div class="contextual">
  <%= link_to "Setting", controller: 'gitlab_importer', action: 'setting' %>
</div>

<h3>Project status:</h3>
<div id="project">
  <ul>
    <li>Name: <%= @project.name %></li>
    <li>Description: <%= @project.description %></li>
    <li>Total issues: <%= @issues_count %></li>
    <li>Import for project: <%= @gitlab_project['name'] %></li>
  </ul>
</div>



<%= form_tag({ :controller => 'gitlab_importer', :action => 'import', :project_id => @project },
             :method => :post, :id => 'query_form') do %>

  <div id="query_form_with_buttons" class="hide-when-print">
    <div id="query_form_content">
      <fieldset id="input-info" class="collapsible">
        <div>
          <table>

            <tr>
              <td><label for='milestone'>Milestone</label></td>
              <td>
                <% milestones = @gitlab_milestones.nil? ? [] : @gitlab_milestones.map {|p| [p['title'], p['title']]}%>
                <%= select_tag 'milestone_select', options_for_select(milestones), prompt: 'Select milestone' %>
              </td>
            </tr>

            <tr>
              <td><label for='label'>Label</label></td>
              <td>
                <% labels = @gitlab_labels.nil? ? [] : @gitlab_labels.map {|p| [p['name'], p['name']]}%>
                <%= select_tag 'label_selects', options_for_select(labels), multiple: true, prompt: 'Select label' %>
              </td>
            </tr>

            <tr>
              <td><label>Issue date range</label></td>
              <td>
                <%= date_field_tag :start_date %>
                <%= date_field_tag :end_date %>
              </td>
            </tr>

            <tr id="ticket_type">
              <td>Issue status</td>
              <td>
                <%= select_tag 'issue_status', options_for_select([['All', 'all'], ['Open', 'opened'], ['Close', 'closed']], 'all') %>
              </td>
            </tr>

            <tr id="is_comment">
              <td>Comment</td>
              <td>
                <%= select_tag 'import_comment', options_for_select([['Yes', true], ['No', false]], false) %>
              </td>
            </tr>

          </table>
        </div>
      </fieldset>
    </div>

    <p class="buttons">
      <%= link_to_function l(:button_apply), '$("#query_form").submit()', :class => 'icon icon-checked' %>
      <%= link_to l(:button_clear), { :set_filter => 1, :project_id => @project.id }, :class => 'icon icon-reload' %>
    </p>
  </div>
<% end %>

<%= javascript_tag do %>
  $(document).ready(function() {
      const updateSelectUI = (element, options) => {
          const firstOption = element.find('option:first').clone();
          element.empty();
          element.prepend(firstOption);

          $.each(options, function (index, option) {
              element.append(
                  $('<option>', {
                      value: option.name,
                      text: option.name
                  })
              );
          });
      }

      const updateMilestonesSelectOptions = (options) => updateSelectUI($('#milestone_select'), options)
      const updateLabelsSelectOptions = (options) => updateSelectUI($('#label_select'), options)
      const updateParentLabelsSelectOptions = (options) => updateSelectUI($('#parent_label'), options)
      const updateProjectSelectOptions = (options) => updateSelectUI($('#gitlab_project_id'), options)
      const fetchData = async (url, method = 'GET', timeout = 0) => {
          try {
              const response = await $.ajax({
                  url,
                  method,
                  timeout
              });
            return response;
          } catch (error) {
              console.error('Error:', error);
              throw error;
          }
      }

      const fetchMilestones = async (projectId, inputApiKeyValue) => {
          const url = `https://gitlab.nal.vn/api/v4/projects/${projectId}/milestones?private_token=${inputApiKeyValue}&visibility=private`;

          try {
              const response = await fetchData(url);
              const milestones = response.map(({id, title}) => ({
              id,
              name: title
              }));

              $('#milestone_select').prop('disabled', false);
              updateMilestonesSelectOptions(milestones);
          } catch (error) {
              console.error('Error:', error);
          }
      }

      const fetchLabels = async (projectId, inputApiKeyValue) => {
          const url = `https://gitlab.nal.vn/api/v4/projects/${projectId}/labels?private_token=${inputApiKeyValue}&visibility=private`;

          try {
              const response = await fetchData(url);
              const labels = response.map(({id, name}) => ({
              id,
              name
              }));

              $('#label_select').prop('disabled', false);
              $('#parent_label').prop('disabled', false);
              updateLabelsSelectOptions(labels)
              updateParentLabelsSelectOptions(labels)
          } catch (error) {
                console.error('Error fetching labels:', error);
          }
      }

      const fetchProjects = async (inputApiKeyValue) => {
          const url = `https://gitlab.nal.vn/api/v4/projects?private_token=${inputApiKeyValue}&visibility=private`;

          try {
              const response = await fetchData(url);
              const projects = response.map(({id, name}) => ({
              id,
              name
              }));

              $('#gitlab_project_id').prop('disabled', false);
              updateProjectSelectOptions(projects)
          } catch (error) {
              console.error('Error:', error);
              $('#apikeyInput').removeAttr('readonly');
          } finally {
                $('#checkApiKeyButton').prop('disabled', false);
          }
      }


      // Handle click API KEY INPUT
      const button = document.getElementById('checkApiKeyButton');
      button.addEventListener('click', () => {
          const inputApiKeyElement = document.getElementById('apikeyInput');
          if (inputApiKeyElement) {
              const inputApiKeyValue = inputApiKeyElement.value;
              if (inputApiKeyValue.length > 0) {
                  $('#checkApiKeyButton').prop('disabled', true);
                  $('#apikeyInput').attr('readonly', true);
                  fetchProjects(inputApiKeyValue);
              }
          }
      });

      // Handle onchange project
      $('#gitlab_project_id').on('change', function () {
          const projectId = $(this).val();
          const inputApiKeyElement = document.getElementById('apikeyInput');

          if (inputApiKeyElement) {
              const inputApiKeyValue = inputApiKeyElement.value;
              if (inputApiKeyValue.length > 0 && projectId.length > 0) {
                  fetchMilestones(projectId, inputApiKeyValue);
                  fetchLabels(projectId, inputApiKeyValue);
              }
          }
      });
  })
<% end %>

